{
  "name": "Dash-button",
  "tagline": "Making the Amazon Dash Button useful",
  "body": "# Amazon Dash Button Fun\r\nThe aim of this project is to make the Amazon Dash button useful (sorry Amazon, but now it is quite useless). To accomplish that, we developed a simple IoT framework that can connect the button to any HTTP or MQTT server.\r\n\r\n## About\r\nThis repository provides two methods that can be used in three different ways to use any Amazon Dash button for your own purpose. \r\n\r\n* Quick Hack: Observing the traffic\r\n* Dash Endpoint\r\n\t* On an openWRT router\r\n\t* Using a Raspberry Pi\r\n\r\nFurthermore, the project provides a simple Python IoT framework, that allows to publish button presses as HTTP or MQTT messages. It supports all three ways of observing button presses. \r\n\r\n## Listening to the Button\r\n\r\nFor a quick test, you can try the [traffic observer](observer). This quick hack monitors the network traffic for the dash button's DHCP request. \r\nIf you want to use the button for a real project, I suggest either setting up an [openWRT router](openwrt) or a [Raspberry Pi](rpi) as an endpoint.\r\n(Either click on the links or checkout the README.md in the respective folder)\r\n\r\nBoth methods provide a Python script (*listen.py*) that allows to test the setup. It can also be used as base for own projecs.\r\n\r\n## IoT Framework\r\n\r\nWe provide a simple IoT framework that builds upon the *listen.py* scripts. The framework provides an abstraction from the used method and can be used with both methods. \r\n\r\nWith the framework, a handler can be installed for each buttons. Whenever the button is pressed, either a MQTT or a HTTP message is published. The code is as simple as\r\n```python\r\nfrom dashiot import DashIoT\r\n\r\n# Create an MQTT publisher that uses the network observer for detecting button presses\r\nmqtt = DashIoT(DashIoT.Connector.OBSERVER, DashIoT.Protocol.MQTT)\r\n\r\n# If button with mac address \"ac63be5aea19\" is pressed, send the mac address under the topic \"dash/button1\"\r\nmqtt.publish_handler(\"ac63be5aea19\", lambda x: (\"dash/button1\", x))\r\n        \r\n# MQTT server that accepts our messages\r\nmqtt.connect(\"iot.eclipse.org\", 1883)\r\n\r\n# Publish all detected button presses forever\r\nmqtt.run()\r\n```\r\n\r\nThe `DashIoT` constructor takes the connector (either `DashIoT.Connector.OBSERVER` for the traffic observer or `DashIoT.Connector.SERVER` for the endpoint) and the protocol (either `DashIoT.Protocol.MQTT` or `DashIoT.Protocol.HTTP`).\r\n### MQTT\r\nIf MQTT is used, the Python package `paho-mqtt` has to be installed (e.g. using `sudo pip install paho-mqtt`). The sample (*test_mqtt.py*) uses Eclipse's public MQTT server ([iot.eclipse.org](http://iot.eclipse.org)). However, any other MQTT server can be used. \r\n\r\nFor every button, a handler has to be configured using `publish_handler`. The first argument is the button's MAC address, the second parameter is a callback function that receives the MAC address and returns a tuple of topic and message.\r\n\r\nThe script *test_view_mqtt.py* is a simple MQTT subscriber that displays the published messages.\r\n\r\n\r\n### HTTP\r\nIf HTTP is used, the framework issues an HTTP GET request to the given URL. As with the MQTT handler, the `publish_handler` function takes the MAC address of the button as the first parameter and a callback funtion as the second parameter. The callback function returns a tuple of GET parameter name and GET parameter value, e.g. if the GET request should be \"?msg=data\", the callback must return `(\"msg\", \"data\")`.\r\n\r\nA simple HTTP test server can be started using `sudo python -m SimpleHTTPServer 80`.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}