{
  "name": "Amazon Dash Button Fun",
  "tagline": "Making the Amazon Dash Button useful",
  "body": "# Amazon Dash Button Fun\r\n\r\n## Standalone: Raspberry Pi\r\n\r\nWe will configure a Raspberry Pi to act as access point for the dash button. Similar to the openWRT solution, this gives us full control over the button's communication. The Raspberry Pi will be connected to the internet through the ethernet port and provide a WiFi access point through a WiFi adapter. \r\n\r\nAll scripts run on the Raspberry Pi and no server/computer is needed to interact with the button.\r\n\r\n**Advantages**\r\n\r\n+ no dependencies\r\n+ no connection to Amazon\r\n+ no router modifications needed\r\n\r\n**Disadvantages**\r\n\r\n+ requires hardware (RPi + WiFi Dongle)\r\n\r\n\r\n## Configuration\r\n\r\n1. Install Raspbian Jessie Lite.\r\n2. Install required packages `sudo apt-get install hostapd dnsmasq isc-dhcp-server` \r\n3. Get a WiFi adapter that is compatible with the Raspberry Pi. I used a [Netgear WNA1000M N150 Micro Adapter](https://www.amazon.de/Netgear-WNA1000M-100FRS-WL-USB-WNA1000M-100GRS-150MBit/dp/B004URO9FG/). It has a Realtek RTL8192CU chipset. If your chipset is supported out-of-the-box, skip the next step.\r\n4. Install the modified hostapd version from Realtek. Either take the binary [`hostapd`](hostapd) from this repository, or follow these steps to build it yourself.\r\n\t+ Download the RTL8192CU driver from Realtek: [http://www.realtek.com/downloads/downloadsView.aspx?Langid=1&PNid=21&PFid=48&Level=5&Conn=4&DownTypeID=3&GetDown=false&Downloads=true#2772](http://www.realtek.com/downloads/downloadsView.aspx?Langid=1&PNid=21&PFid=48&Level=5&Conn=4&DownTypeID=3&GetDown=false&Downloads=true#2772)\r\n\t+ Navigate to *RTL8188C_8192C_USB_linux_v4.0.2_9000.20130911/wpa_supplicant_hostapd/* and extract *wpa_supplicant_hostapd-0.8_rtw_r7475.20130812.tar.gz*\r\n\t+ navigate to *wpa_supplicant_hostapd-0.8_rtw_r7475.20130812/hostapd/* and build with `make`.\r\n\t+ remove the installed *hostapd* binary `sudo mv /usr/sbin/hostapd /usr/sbin/hostapd.orig`\r\n\t+ install the new *hostapd* binary `sudo cp hostapd /usr/sbin/hostapd`\r\n5. Configure *hostapd* by creating the file */etc/hostapd/hostapd.conf* with the following contents (if you don't have the RTL8192CU chipset, replace `rtl871xdrv` with `nl80211`)\r\n\r\n        interface=wlan0\r\n        driver=rtl871xdrv\r\n        ssid=DashIoT\r\n        channel=1\r\n        auth_algs=1\r\n        wmm_enabled=0\r\n        wpa=1\r\n        wpa_passphrase=yourpassword\r\n        wpa_key_mgmt=WPA-PSK\r\n        wpa_pairwise=CCMP\r\n        macaddr_acl=0\r\n\r\n6. Configure the WiFi adapter in */etc/network/interfaces* to use the 192.168.50.x network. It should look like this\r\n\r\n        auto lo\r\n        iface lo inet loopback\r\n        \r\n        iface eth0 inet manual\r\n        \r\n        iface wlan0 inet static\r\n            address 192.168.50.1\r\n            netmask 255.255.255.0\r\n        \r\n        hostapd /etc/hostapd/hostapd.conf\r\n\r\n7. Configure the DHCP server in */etc/dhcp/dhcp.conf*. It should look like this\r\n\r\n        default-lease-time 600;\r\n        max-lease-time 7200;\r\n        option routers 192.168.50.1;\r\n        option domain-name-servers 192.168.50.1, 192.168.50.1;\r\n\r\n        subnet 192.168.50.0 netmask 255.255.255.0 {\r\n                pool {\r\n                        max-lease-time 600;\r\n                        range 192.168.50.10 192.168.50.50;\r\n                        option routers 192.168.50.1;\r\n                        option domain-name-servers 192.168.50.1, 192.168.50.1;\r\n                        allow unknown-clients;\r\n                }\r\n        }\r\n        \r\n8. Disable Google's DNS server\r\n\r\n        sudo iptables -t nat -I PREROUTING -j DNAT --destination 8.8.8.8 --to 192.168.50.1\r\n        sudo iptables -t nat -I PREROUTING -j DNAT --destination 8.8.4.4 --to 192.168.50.1\r\n        \r\n9. Enable NAT:\r\n\r\n        sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\r\n        sudo iptables -A FORWARD -i eth0 -o wlan0 -j ACCEPT\r\n        sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT\r\n \r\n10. Enable IPv4 forwarding. Add following line to */etc/sysctl.conf*: \r\n\r\n        net.ipv4.ip_forward=1\r\n\r\n11. Make the rules persistent by installing *iptables-persistent*: `sudo apt-get install iptables-persistent`\r\n12. Reboot the Raspberry Pi (`sudo reboot`)\r\n13. You should be able to connect to the access point with any wireless device.\r\n14. Activate your Dash button using the Amazon app. You can abort the activation at the point where you have to select a product.\r\n15. Redirect the Amazon endpoint to the Raspberry Pi by adding the following line to */etc/dnsmasq.conf*:\r\n\r\n        address=/parker-gw-eu.amazon.com/192.168.50.1\r\n\r\n16. Restart *dnsmasq*: `sudo service dnsmasq restart`\r\n\r\n## Listening for button presses\r\n\r\nAll the tools from the openWRT setup also work with the Raspberry Pi setup. Just run `sudo python openwrt/listen.py` to test the setup. Every time the button is pressed, the MAC address of the button is displayed.\r\n \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}