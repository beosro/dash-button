{
  "name": "Amazon Dash Button Fun",
  "tagline": "Making the Amazon Dash Button useful",
  "body": "# Amazon Dash Button Fun\r\n\r\n## Dash Endpoint: OpenWRT Router\r\n\r\nIf you have a router running openWRT, only a few modifications are required to use it as endpoint for the Dash button. A custom endpoint prevents the button from connecting to Amazon.\r\n\r\nAfter the button has its IP address, it starts to resolve `parker-gw-eu.amazon.com`. By sending a fake DNS-entry, we can redirect the communication to our own server. \r\n\r\n**Advantages**\r\n\r\n+ easy setup\r\n+ does not connect to Amazon\r\n\r\n**Disadvantages**\r\n\r\n+ router with custom firmware required\r\n\r\n## Configuration\r\n\r\n1. Activate your Dash button using the Amazon app. You can abort the activation at the point where you have to select a product.\r\n2. Edit */etc/config/dhcp*, add the following line in the `config dnsmasq` section:\r\n\r\n        list address '/parker-gw-eu.amazon.com/192.168.1.10`\r\nHere, `192.168.1.10` is the IP address of our Dash endpoint. This can be either a local IP or any IP address on the internet.\r\n\r\n3. Restart dnsmasq: `/etc/init.d/dnsmasq restart`\r\n\r\n## Listening for button presses\r\n\r\nRun the `listen.py` script as your Dash endpoint on the server specified in */etc/config/dhcp*. In this example this would be a local computer with the IP  `192.168.1.10`. \r\n\r\nEverytime the button is pressed, it connects to our endpoint. The script outputs the button's MAC address on every press.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}